// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramBot;

#nullable disable

namespace TelegramBot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    partial class BotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("TelegramBot.ConsumedRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<double?>("Kcal")
                        .HasColumnType("REAL")
                        .HasColumnName("kcal");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("consumed", (string)null);
                });

            modelBuilder.Entity("TelegramBot.UserRow", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int?>("DateTimeOffset")
                        .HasColumnType("INTEGER")
                        .HasColumnName("date_time_offset");

                    b.Property<double?>("MaxKcal")
                        .HasColumnType("REAL")
                        .HasColumnName("max_kcal");

                    b.Property<double?>("MinKcal")
                        .HasColumnType("REAL")
                        .HasColumnName("min_kcal");

                    b.Property<string>("RegisterDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("register_date");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TelegramBot.ConsumedRow", b =>
                {
                    b.HasOne("TelegramBot.UserRow", "User")
                        .WithMany("ConsumedItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramBot.UserRow", b =>
                {
                    b.Navigation("ConsumedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
